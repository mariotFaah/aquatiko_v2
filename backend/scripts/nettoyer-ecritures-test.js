// scripts/nettoyer-ecritures-test.js
import { db } from '../src/core/database/connection.js';
import { JournalService } from '../src/modules/comptabilite/services/JournalService.js';

async function nettoyerEtRegenererEcritures() {
  console.log('üßπ Nettoyage complet des √©critures...');
  
  const journalService = new JournalService();
  
  // 1. Supprimer TOUTES les √©critures existantes
  await db('ecritures_comptables').del();
  console.log('‚úÖ Toutes les anciennes √©critures supprim√©es');
  
  // 2. R√©cup√©rer TOUTES les factures valid√©es
  const facturesValidees = await db('factures').where('statut', 'validee');
  console.log(`üìã ${facturesValidees.length} factures valid√©es √† traiter`);
  
  // 3. R√©g√©n√©rer les √©critures pour chaque facture
  for (const facture of facturesValidees) {
    console.log(`üîÑ Traitement facture ${facture.numero_facture}...`);
    await journalService.genererEcritureFacture(facture);
  }
  
  console.log('‚úÖ Toutes les √©critures r√©g√©n√©r√©es');
  
  // 4. V√©rifier le r√©sultat
  const toutesEcritures = await db('ecritures_comptables').select('*');
  console.log(`üìä Total √©critures cr√©√©es: ${toutesEcritures.length}`);
  
  console.log('üîç D√©tail par compte:');
  const parCompte = await db('ecritures_comptables')
    .groupBy('compte')
    .select('compte')
    .sum('debit as total_debit')
    .sum('credit as total_credit');
  
  parCompte.forEach(compte => {
    const solde = parseFloat(compte.total_debit) - parseFloat(compte.total_credit);
    console.log(`- ${compte.compte}: D√©bit ${compte.total_debit} | Cr√©dit ${compte.total_credit} | Solde ${solde}`);
  });
}

nettoyerEtRegenererEcritures().catch(console.error);
